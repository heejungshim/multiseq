% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiseq.R
\name{permutation.logLR}
\alias{permutation.logLR}
\title{Perform permutation-based test using logLR as a test statistic.}
\usage{
permutation.logLR(pheno.dat, geno.dat, library.read.depth = NULL,
  numPerm = 100, numSig = 10, eps = 0.01,
  use.default.compute.logLR = TRUE, minobs = 1, pseudocounts = 0.5,
  all = FALSE, center = FALSE, repara = TRUE, forcebin = FALSE,
  lm.approx = TRUE, disp = "add", nullcheck = TRUE, pointmass = TRUE,
  prior = "uniform", gridmult = 2, mixsd = NULL, trace = FALSE,
  mixcompdist = "normal", lambda1 = 1, lambda2 = 0, df = NULL,
  randomstart = FALSE, minimaloutput = FALSE, maxiter = 5000,
  VB = FALSE, cxx = TRUE, maxlogLR = NULL)
}
\arguments{
\item{pheno.dat:}{a matrix of \code{nsig} (# of samples) by \code{n} counts where \code{n} should be a power of 2}

\item{geno.dat:}{a matrix of \code{numC} (number of SNPs or number of covariates) by \code{nsig}; each row contains genotypes/covariate value for each sample.}

\item{library.read.depth:}{an \code{nsig}-vector containing the total number of reads for each sample (used to test for association with the total intensity). Defaults to NULL.}

\item{numPerm:}{number of permutations; if \code{numPerm} == NULL, do not perform permutation, but return \code{logLR}.}

\item{numSig:}{permutation stops when number of permuted data with significant test statistic reaches this number.}

\item{eps:}{when \code{logLR} == 0, we use a value sampled from \code{Unif(-eps, 0)} as \code{logLR}.}

\item{use.default.compute.logLR:}{bool, if TRUE, it uses default options in \code{\link{compute.logLR}}. Otherwise, it passes parameters to \code{\link{compute.logLR}}.}

\item{minobs:}{minimum number of obs required to be in each logistic model}

\item{pseudocounts:}{a number to be added to counts}

\item{all:}{bool, if TRUE pseudocounts are added to all entries, if FALSE pseudocounts are added only to cases when either number of successes or number of failures (but not both) is 0}

\item{center:}{bool, indicating whether to center \code{g}}

\item{repara:}{bool, indicating whether to reparameterize alpha and beta so that their likelihoods can be factorized.}

\item{forcebin:}{bool, if TRUE don't allow for overdipersion. Defaults to TRUE if \code{nsig=1}}

\item{lm.approx:}{bool, indicating whether a WLS alternative should be used}

\item{disp:}{"all" or "mult", indicates which type of overdispersion is assumed when \code{lm.approx}=TRUE}

\item{cxx:}{bool, indicating whether to use Rcode or c++ code (faster)}

\item{maxlogLR:}{a positive number, default=NULL, if \code{maxlogLR} is provided as a positive number, the function returns this number as \code{logLR} when \code{logLR} is infinite.}
}
\value{
a list of \code{most.sig.SNP.posi} (if there are multiple SNPs, returns position of SNPs with strongest signal), \code{pval}, \code{logLR} (output from \code{\link{compute.logLR}} for each SNP), \code{Count_stop} (when permutaton stops), \code{Count_sig} (number of permuted data with significant test statistic), \code{numPerm} (parameter), and \code{numSig} (parameter).
}
\description{
This function takes a series of Poisson count signals \code{pheno.dat}, with data on different samples in each row and genotype from multiple SNPs (or any covariate) \code{geno.dat} for each sample, and returns p-value obtained by permutation (use logLR as a test statistic). If multiple SNPs are provided, this function use max(logLR) as a test statistic.  
Parameters \code{minobs}, \code{pseudocounts}, \code{all}, \code{center}, \code{repara}, \code{forcebin}, \code{lm.approx}, and \code{disp} are passed to \code{\link{glm.approx}}. Parameters \code{pointmass}, \code{prior}, \code{gridmult}, \code{nullcheck}, \code{mixsd}, \code{VB} are passed to \pkg{ashr}.
}

